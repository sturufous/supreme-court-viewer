#!/bin/bash
export MSYS_NO_PATHCONV=1
set -e

S2I_EXE=s2i
if [ -z "$(type -P "$S2I_EXE")" ]; then
  echo -e "The ${S2I_EXE} executable is needed and not on your path."
  echo -e "It can be downloaded from here: https://github.com/openshift/source-to-image"
  echo -e "Make sure you place it in a directory on your path."
  exit 1
fi

SCRIPT_HOME="$(cd "$(dirname "$0")" && pwd)"
export COMPOSE_PROJECT_NAME="${COMPOSE_PROJECT_NAME-scv}"

# =================================================================================================================
# Usage:
# -----------------------------------------------------------------------------------------------------------------
usage() {
  cat <<-EOF

  Usage: $0 {start|stop|build}

  Options:

  build - Build the docker images for the project.
          You need to do this first, since the builds require some s2i builds.
          You can build individual components as shown below, components that have dependencies
          will have these dependencies built too.  By default all components are built.

          Examples:
          - Build everything:
            $0 build
          - Build the web UI only:
            $0 build web

          Containers:
            - web
            - api

  start - Creates the application containers from the built images
          and starts the services based on the docker-compose.yaml file.
          Example:
            $0 start

  stop - Stops the services.  This is a non-destructive process.  The containers
         are not deleted so they will be reused the next time you run start.

  down - Brings down the services and removes the volumes (storage) and containers.
  rm - Same as down

EOF
exit 1
}

# -----------------------------------------------------------------------------------------------------------------
# Functions:
# -----------------------------------------------------------------------------------------------------------------
build-all() {
 build-web
 build-api
}

build-api() {
  #
  # api
  #
  echo -e "\n\n===================================================================================================="
  echo -e "Building api image using s2i ..."
  echo -e "----------------------------------------------------------------------------------------------------"
  ${S2I_EXE} build \
    --copy \
    -e "ASPNETCORE_ENVIRONMENT=Production" \
    -e "ASPNETCORE_URLS=http://+:5000" \
    -e "CORS_DOMAIN=http://localhost:8080" \
    -e "DOTNET_STARTUP_PROJECT=./api/api.csproj" \
    '..' \
    'registry.access.redhat.com/ubi8/dotnet-80:8.0' \
    'scv-api'
  echo -e "===================================================================================================="
}

build-web() {
  #
  # web
  #
  # The web-runtime image is used for the final runtime image.
  # The scv-app image is used to build the artifacts for the vue distribution.
  # The vue-on-nginx image is copy of the nginx-runtime image complete with a copy of the build artifacts.
  #
  echo -e "\n\n===================================================================================================="
  echo -e "Building the scv-web-runtime (nginx-runtime) image using Docker ..."
  echo -e "----------------------------------------------------------------------------------------------------"
  docker build \
    -t 'scv-web-runtime' \
    -f './nginx-runtime/Dockerfile' './nginx-runtime/'
  echo -e "===================================================================================================="

  # Apparently vue-cli-tools wants WEB_BASE_HREF -> vue.config.js -> publicPath at compile time.
  # I tried using __webpack_public_path__, but the CSS file path and JS file path weren't correctly updated.
  # Also note we don't load in environment variables from the arguments here.
  echo -e "\n\n===================================================================================================="
  echo -e "Building the scv-web-artifacts image using s2i ..."
  echo -e "----------------------------------------------------------------------------------------------------"
  ${S2I_EXE} build \
    --copy \
    '../web' \
    'registry.access.redhat.com/ubi8/nodejs-14' \
    'scv-web-artifacts'
  echo -e "===================================================================================================="

  echo -e "\n\n===================================================================================================="
  echo -e "Building the scv-web image using Docker ..."
  echo -e "----------------------------------------------------------------------------------------------------"
  docker build \
    -t 'scv-web' \
    --build-arg IMAGE_PREFIX=${COMPOSE_PROJECT_NAME}- \
    -f './vue-on-nginx/Dockerfile' './vue-on-nginx/'
  echo -e "===================================================================================================="
}

build-web-dev() {
  #
  # web-dev
  #
  echo -e "\n\n===================================================================================================="
  echo -e "Building the nginx-runtime image using Docker ..."
  echo -e "----------------------------------------------------------------------------------------------------"
  docker build \
    -t 'nginx-runtime' \
    -f './nginx-runtime/Dockerfile' './nginx-runtime/'
  echo -e "===================================================================================================="

  echo -e "\n\n===================================================================================================="
  echo -e "Building the scv-web-dev image using s2i ..."
  echo -e "----------------------------------------------------------------------------------------------------"
  ${S2I_EXE} build \
    -e "DEV_MODE=true" \
    '../web' \
    'registry.access.redhat.com/ubi8/nodejs-14' \
    'scv-web-dev'
  echo -e "===================================================================================================="
}

configureEnvironment () {

  if [ -f .env ]; then
    echo -e "\nLoading environment variables from .env ...\n"
    source .env
  fi

  for arg in $@; do
    case "$arg" in
      *=*)
        export ${arg}
        ;;
    esac
  done

  # scv-db
  export POSTGRESQL_DATABASE=${POSTGRESQL_DATABASE:-appdb}
  export POSTGRESQL_USER=${POSTGRESQL_USER:-scv}
  export POSTGRESQL_PASSWORD=${POSTGRESQL_PASSWORD:-jeKEumGzuRVY4EJyfcUk}
  export POSTGRESQL_ADMIN_PASSWORD=${POSTGRESQL_ADMIN_PASSWORD:-yM%J]7RZgY@!zb=*#4kB}

  # scv-web
  export API_URL=${API_URL-http://api:5000/api/}
  export WEB_BASE_HREF=${WEB_BASE_HREF-/scjscv/}
}

getStartupParams() {
  CONTAINERS=""

  ARGS=""

  for arg in $@; do
    case "$arg" in
      *=*)
        # Skip it
        ;;
     -*)
        ARGS+=" $arg";;
      *)
        CONTAINERS+=" $arg";;
    esac
  done

  echo ${ARGS} ${CONTAINERS}
}

toLower() {
  echo $(echo ${@} | tr '[:upper:]' '[:lower:]')
}

functionExists() {
  (
    if [ ! -z ${1} ] && type ${1} &>/dev/null; then
      return 0
    else
      return 1
    fi
  )
}

deleteVolumes() {
  _projectName=${COMPOSE_PROJECT_NAME:-docker}

  echo "Stopping and removing any running containers ..."
  docker-compose down -v

  _pattern="^${_projectName}_\|^docker_"
  _volumes=$(docker volume ls -q | grep ${_pattern} | cat)

  if [ ! -z "${_volumes}" ]; then
    echo "Removing project volumes ..."
    echo ${_volumes} | xargs docker volume rm
  else
    echo "No project volumes exist."
  fi

  echo "Removing build cache ..."
  rm -Rf ../client/.cache
}
# =================================================================================================================

pushd ${SCRIPT_HOME} >/dev/null
COMMAND=$(toLower ${1})
shift

case "$COMMAND" in
  start)
    _startupParams=$(getStartupParams $@)
    configureEnvironment $@
    docker-compose up ${_startupParams}
    ;;
  web-dev)
    # todo
    ;;
  stop)
    docker-compose stop
    ;;
  rm|down)
    configureEnvironment
    deleteVolumes
    ;;
  build)
    buildImage=$(toLower ${1})
    shift || buildImage=all
    buildImage=$(echo ${buildImage} | sed s~^vcr-~~)
    case "$buildImage" in
      *=*)
        buildImage=all
        ;;
    esac

    if functionExists "build-${buildImage}"; then
      eval "build-${buildImage}"
    else
      echo -e "Error:\nThe build function, build-${buildImage}, does not exist.  Please check your build parameters and try again.\nUse '-h' to get full help details."
      exit 1
    fi
    ;;
  *)
    usage
esac

popd >/dev/null